{"pageProps":{"post":{"title":"Web component - slot","description":"<slot> 태그를 이용해 커스텀 엘리먼트에 자식 엘리먼트를 주입할 수 있는 방법을 소개 합니다.\n<slot> 태그를 이용해 조금더 유연한 형태의 dialog 커스텀 엘리먼트를 만들기\n","fileName":"web-component-web-component---slot.md","category":"web-component","published":true,"publishedAt":"2022-08-18","thumbnailName":"c96f4eff2512178b9b4e02d5aad66827","tags":["custom dialog","custom element","dialog","slot","web component","웹 컴포넌트","커스텀 엘리먼트"],"references":[{"title":"MDN - Using templates and slots","url":"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots"},{"title":"MDN - slot","url":"https://developer.mozilla.org/ko/docs/Web/HTML/Element/slot"},{"title":"MDN - pseudo-elements","url":"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"}],"series":{"prevPostTitle":"Web component - Shadow DOM"},"order":23},"content":"<h2 id=\"table-of-contents\">Table of contents</h2>\n<ol>\n<li><a href=\"#slot\">Slot</a><ol>\n<li><a href=\"#slot-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">Slot 사용하기</a></li>\n<li><a href=\"#styling\">Styling</a></li>\n</ol>\n</li>\n<li><a href=\"#dialog-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Dialog 만들기</a></li>\n</ol>\n<h2 id=\"slot\">Slot</h2>\n<p><code>&lt;slot&gt;</code> 태그는 웹 컴포넌트 내 특정 영역의 <code>마크업</code>을 외부로 부터 주입 받기 위해 사용되는 태그다.</p>\n<p>예를들면 <code>dialog</code> 컴포넌트 처럼 팝업이 나타나고 닫기 버튼을 통해 다시 팝업을 닫는 것과 같은 기능은 컴포넌트 내부에서 구현되지만 팝업의 내용을 채우기 위해서는 외부로 부터 <code>DOM</code>을 주입 받아야 하는데 이럴때 사용할 수 있는 태그가 <code>&lt;slot&gt;</code>이다.</p>\n<h3 id=\"slot-사용하기\">Slot 사용하기</h3>\n<p><code>&lt;slot&gt;</code> 태그를 통해 커스텀 엘리먼트의 내부로 <code>DOM</code>을 넣는 예제는 아래와 같다.</p>\n<pre><code class=\"language-javascript\">customElements.define(\n  &#39;custom-slot&#39;,\n  class extends HTMLElement {\n    constructor() {\n      super()\n      this.attachShadow({ mode: &#39;open&#39; })\n      this.shadowRoot.innerHTML = `\n        &lt;style&gt;\n          #container {\n            padding: 20px 10px;\n            background-color: skyblue;\n          }\n        &lt;/style&gt;\n\n        &lt;div id=&quot;container&quot;&gt;\n          &lt;slot&gt;&lt;/slot&gt;\n        &lt;/div&gt;\n      `\n    }\n  }\n)\n</code></pre>\n<pre><code class=\"language-html\">...\n&lt;custom-slot&gt;\n  &lt;p&gt;Slotted&lt;/p&gt;\n&lt;/custom-slot&gt;\n...\n</code></pre>\n<p><code>&lt;slot&gt;</code>은 <code>name</code> attribute를 통해 식별할 수 있다. 만약 <code>&lt;slot&gt;</code> 태그에 <code>name</code> attribute가 설정되어 있다면 외부에서 대상 <code>&lt;slot&gt;</code>을 식별 할 수 있도록 <code>slot</code> attribute를 통해 반드시 대상 <code>&lt;slot&gt;</code>의 <code>name</code>을 입력해야 한다.</p>\n<pre><code class=\"language-javascript\">customElements.define(\n  &#39;custom-slot&#39;,\n  class extends HTMLElement {\n    constructor() {\n      super()\n      this.attachShadow({ mode: &#39;open&#39; })\n      this.shadowRoot.innerHTML = `\n        &lt;style&gt;\n          #container {\n            padding: 20px 10px;\n            background-color: skyblue;\n          }\n        &lt;/style&gt;\n\n        &lt;div id=&quot;container&quot;&gt;\n          &lt;slot name=&quot;first-slot&quot;&gt;&lt;/slot&gt;\n          &lt;slot name=&quot;second-slot&quot;&gt;&lt;/slot&gt;\n        &lt;/div&gt;\n      `\n    }\n  }\n)\n</code></pre>\n<pre><code class=\"language-html\">...\n&lt;custom-slot&gt;\n  &lt;p&gt;Slotted&lt;/p&gt;\n  &lt;p slot=&quot;second-slot&quot;&gt;Second Slotted&lt;/p&gt;\n  &lt;p slot=&quot;first-slot&quot;&gt;First Slotted&lt;/p&gt;\n&lt;/custom-slot&gt;\n...\n</code></pre>\n<p>위 예제와 같이 <code>&lt;slot&gt;</code>을 주입하고 <code>name</code>, <code>slot</code> attribute를 설정하면 아래와 같은 형태로 화면에 출력된다.</p>\n<ul>\n<li><code>&lt;p&gt;Slotted&lt;/p&gt;</code>는 <code>slot</code> attribute가 없어 대상 <code>&lt;slot&gt;</code>을 찾을 수 없기 때문에 화면에 출력되지 않음</li>\n<li><code>&lt;p slot=&quot;second-slot&quot;&gt;Second Slotted&lt;/p&gt;</code>과 <code>&lt;p slot=&quot;first-slot&quot;&gt;First Slotted&lt;/p&gt;</code>은 <code>slot</code> attribute를 통해 대상 <code>&lt;slot&gt;</code>을 찾아 화면에 출력됨</li>\n<li>화면에 출력된 두 <code>&lt;p&gt;</code> 태그는 주입시 순서와 달리 <code>&lt;custom-slot&gt;</code> 컴포넌트가 지정한 <code>&lt;slot&gt;</code>의 위치에 따라 순서가 바뀐 상태로 출력됨</li>\n</ul>\n<blockquote>\n<p><code>&lt;slot&gt;</code> 태그에 <code>name</code>이 설정되어 있지 않다면 <code>&lt;slot&gt;</code> 태그에 주입되는 자식 요소중 <code>slot</code> attribute가 설정되지 않은 <em>모든 엘리먼트</em>를 <code>&lt;slot&gt;</code>에 삽입한다.</p>\n<p><code>&lt;slot&gt;</code> 태그에 <code>name</code> attribute가 설정되어 있다면 <code>slot</code> attribute에 <code>name</code>과 동일한 값을 가지고 있는 <em>모든 엘리먼트</em>가 <code>&lt;slot&gt;</code>에 삽입 된다.</p>\n</blockquote>\n<h3 id=\"styling\">Styling</h3>\n<p><code>&lt;slot&gt;</code> 태그를 통해 외부에서 주입 받은 엘리먼트에 대한 스타일을 정의하기 위해 <code>::slotted</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\">pseudo-elements</a>를 사용한다.</p>\n<p><code>::slotted</code>를 이용한 <code>CSS</code>는 반드시 <code>shadow DOM</code> 내부에 정의해야 한다. 이렇게 정의된 <code>selector</code>는 <code>text node</code>를 제외한 <code>&lt;slot&gt;</code> 내부의 모든 엘리먼트를 대상으로 한다.</p>\n<pre><code class=\"language-javascript\">customElements.define(\n  &#39;custom-slot&#39;,\n  class extends HTMLElement {\n    constructor() {\n      super()\n      this.attachShadow({ mode: &#39;open&#39; })\n      this.shadowRoot.innerHTML = `\n        &lt;style&gt;\n          #container {\n            padding: 20px 10px;\n            background-color: skyblue;\n          }\n          ::slotted(*) {\n            font-size: 20px;\n          }\n          ::slotted([slot=first-slot]) {\n            color: tomato;\n          }\n          ::slotted([slot=second-slot]) {\n            color: green;\n          }\n        &lt;/style&gt;\n\n        &lt;div id=&quot;container&quot;&gt;\n          &lt;slot name=&quot;first-slot&quot;&gt;&lt;/slot&gt;\n          &lt;slot name=&quot;second-slot&quot;&gt;&lt;/slot&gt;\n        &lt;/div&gt;\n      `\n    }\n  }\n)\n</code></pre>\n<p>예제와 같은 style 정의를 통해 외부에서 전달 받은 엘리먼트에 대한 스타일을 적용할 수 있다.</p>\n<blockquote>\n<p><code>[slot=second-slot]</code> 에서 확인 할 수 있듯 특정 attribute를 통해 대상 엘리먼트를 <code>select</code> 할 경우 외부에서 정의한 엘리먼트의 attribute를 참조한다.</p>\n</blockquote>\n<h2 id=\"dialog-만들기\">Dialog 만들기</h2>\n<p><code>&lt;slot&gt;</code> 태그와 <code>::slotted</code> <code>pseudo element</code>를 이용해 외부에서 컨텐츠 영역의 <code>DOM</code>을 주입 할 수 있는 <code>custom dialog</code> 컴포넌트를 만든다.</p>\n<pre><code class=\"language-javascript\">customElements.define(\n  &#39;custom-dialog&#39;,\n  class extends HTMLElement {\n    constructor() {\n      super()\n      this.attachShadow({ mode: &#39;open&#39; })\n      this.shadowRoot.innerHTML = `\n        &lt;style&gt;\n          :host {\n            display: none;\n          }\n          :host([open]) {\n            display: initial;\n          }\n          #modal {\n            position: absolute;\n            top: 0;\n            right: 0;\n            bottom: 0;\n            left: 0;\n            background-color: black;\n            opacity: 0.5;\n            z-index: 1;\n          }\n          #dialog {\n            position: absolute;\n            background-color: white;\n            border-radius: 6px;\n            z-index: 2;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n          }\n          #dialog &gt; header {\n            padding: 5px;\n            display: flex;\n            gap: 10px;\n          }\n          #close-button {\n            margin: auto 0;\n            border: none;\n            background-color: transparent;\n          }\n          #content {\n            padding: 10px;\n          }\n          ::slotted([slot=title]) {\n            flex: 1;\n            font-size: 1rem;\n            font-weight: bold;\n            padding: 10px 0;\n            margin: 0;\n          }\n        &lt;/style&gt;\n\n        &lt;div id=&quot;modal&quot;&gt;&lt;/div&gt;\n        &lt;section id=&quot;dialog&quot;&gt;\n          &lt;header&gt;\n            &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;\n            &lt;button id=&quot;close-button&quot;&gt;X&lt;/button&gt;\n          &lt;/header&gt;\n          &lt;section id=&quot;content&quot;&gt;\n            &lt;slot name=&quot;content&quot;&gt;&lt;/slot&gt;\n          &lt;/section&gt;\n        &lt;/section&gt;\n      `\n    }\n\n    connectedCallback() {\n      const closeButton = this.shadowRoot.querySelector(&#39;#close-button&#39;)\n      closeButton.onclick = this.close.bind(this)\n    }\n\n    open() {\n      this.setAttribute(&#39;open&#39;, &#39;&#39;)\n    }\n\n    close() {\n      this.removeAttribute(&#39;open&#39;)\n    }\n  }\n)\n</code></pre>\n<p><code>&lt;custom-dialog&gt;</code> 컴포넌트는 <code>title</code> 과 <code>content</code> 두개의 <code>slot</code> 영역을 가지고 있다. 각 영역에 기본적으로 적용되야 할 스타일은 <code>::slotted</code> <code>pseudo-elements</code>를 통해 정의되었고 <code>open</code>과 <code>close</code> 두개의 메서드를 제공한다.</p>\n","postsByCategory":[{"title":"Web component - Shadow DOM","description":"Web component의 핵심인 encapsulation은 어떻게 이루어질까?\nShadow DOM의 이해","fileName":"web-component-web-component---shadow-dom.md","category":"web-component","published":true,"publishedAt":"2022-08-10","thumbnailName":"752fbf06b172dc96f8f10c87b1d91872","tags":["Shadow DOM","custom element","encapsulation","shadow","shadow tree","web component","쉐도우","쉐도우 돔","쉐도우 트리","웹 컴포넌트","은닉화","커스텀 엘리먼트"],"references":[{"title":"MDN - Composed","url":"https://developer.mozilla.org/en-US/docs/Web/API/Event/composed"},{"title":"MDN - Using shadow DOM","url":"https://developer.mozilla.org/ko/docs/Web/Web_Components/Using_shadow_DOM"}],"series":{"prevPostTitle":"Web component - custom element","nextPostTitle":"Web component - slot"},"order":22},{"title":"Web component - custom element","description":"웹 컴포넌트로 만드는 나만의 custom element","fileName":"web-component-web-component---custom-element.md","category":"web-component","published":true,"publishedAt":"2022-07-31","thumbnailName":"1b85d15d3e19b99e3d6350d8b69cc39a","tags":["Shadow DOM","shadow"],"references":[{"title":"Custom element naming convention","url":"https://html.spec.whatwg.org/#valid-custom-element-name"},{"title":"WebComponent org","url":"https://www.webcomponents.org/"},{"title":"https://web.dev/custom-elements-v1/#custom-element-reactions","url":"https://web.dev/custom-elements-v1/#custom-element-reactions"}],"series":{"nextPostTitle":"Web component - Shadow DOM"},"order":18}],"enableContentExplorer":true},"__N_SSG":true}