{
  "pageProps": {
    "post": {
      "title": "ESLint - Plugin and Extends",
      "description": "ESLint의 Plugin과 Extends의 차이는 무엇일까?",
      "fileName": "eslint-plugin-and-extends.md",
      "category": "개발환경",
      "published": true,
      "publishedAt": "2022-02-27",
      "thumbnailName": "eslint-plugin-and-extends.png",
      "tags": ["eslint", "eslint extends", "eslint plugin", "extends", "lint", "plugin", "개발환경"],
      "references": [
        { "title": "eslint-plugin-react Github repository", "url": "https://github.com/yannickcr/eslint-plugin-react/blob/master/index.js#L118-L179" }
      ],
      "order": 11
    },
    "content": "<h2 id=\"table-of-contents\">Table of contents</h2>\n<ol>\n<li><a href=\"#plugin\">Plugin</a></li>\n<li><a href=\"#sharable-config\">Sharable config</a></li>\n<li><a href=\"#plugin-with-config\">Plugin with config</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ol>\n<h2 id=\"plugin\">Plugin</h2>\n<p><code>Plugin</code>은 <code>ESLint</code> rule이 들어 있는 하나의 <code>Rule set</code> 이다.</p>\n<p><code>Plugin</code>은 일반적으로 <code>eslint-plugin-${plugin-name}</code> 형식의 이름을 갖는 패키지다.</p>\n<p>플러그인을 사용하기 위해선 필요한 플러그인을 설치하고 ESLint 설정파일의 <code>plugins</code> 프로퍼티에 추가하면 된다.</p>\n<pre><code class=\"language-json\">{\n  &quot;plugins&quot;: [&quot;react&quot;]\n}\n</code></pre>\n<blockquote>\n<p>Plugin을 추가 할 때 prefix인 <code>eslint-plugin-</code> 부분은 생략 가능하다.</p>\n</blockquote>\n<p>플러그인을 적용한다는 것은 플러그인에 정의되어 있는 Rule set을 사용하겠다는 것을 의미하지는 않는다.</p>\n<p>플러그인은 여러가지 Rule set을 제공할 뿐 특정 룰을 사용하려면 이를 직접 작성야한다.</p>\n<p>사용하고자 하는 룰은 <code>rules</code> 프로퍼티를 통해 정의한다.</p>\n<p>플러그인이 제공하는 Rule set의 수는 상당히 방대하고 이것들을 모두 수동으로 설정하는 것은 번거로운 일이다.</p>\n<h2 id=\"sharable-config\">Sharable config</h2>\n<p>앞서 이야기한 번거로움을 해결하기 위해 <code>sharable config</code>가 존재한다. <code>sharable config</code>는 일반적으로 <code>eslint-config-${config-name}</code> 형식의 이름을 갖는 패키지이다. 사용하려는 rule set을 수동으로 적용하는 것이 아닌 sharable config를 적용하는 것을 통해 방대한 rule set을 한번에 적용할 수 있다.</p>\n<p>sharable config의 사용여부는 ESLint 설정파일의 <code>extends</code> 프로퍼티에 해당 sharable config를 추가하면 된다.</p>\n<pre><code class=\"language-json\">{\n  &quot;extends&quot;: [&quot;prettier&quot;]\n}\n</code></pre>\n<blockquote>\n<p><code>eslint-plugin</code> 과 같이 prefix인 <code>eslint-config-</code> 는 생략 가능하다.</p>\n</blockquote>\n<h2 id=\"plugin-with-config\">Plugin with Config</h2>\n<p>일부 플러그인은 sharable config를 함께 가지고 있다. plugin과 config를 각각 설치하는 것이 아닌 plugin 설치를 통해 config 까지 함께 설치되는 것이다.</p>\n<p>plugin이 내장하고 있는 config를 사용하기 위해서는 sharable config 설정과 동일한 방법으로 하돼 <code>plugin:</code> Prefix를 붙여준다.</p>\n<pre><code class=\"language-json\">{\n  &quot;extends&quot;: [&quot;plugin:react/recomended&quot;]\n}\n</code></pre>\n<blockquote>\n<p><code>eslint-plugin-react</code>가 제공하는 <code>recomended</code> config를 사용하는 예제로 prefix인 <code>eslint-plugin</code>은 생략 가능하다.</p>\n</blockquote>\n<blockquote>\n<p>Plugin이 제공하는 config를 확인하기 위해선 해당 플러그인의 <code>root/index.js</code> 를 참고하면 된다. (일반적으로) index.js 에서 export 하는 Object에서 configs property를 통해 어떤 config가 제공되고 있는지 확인 할 수 있다.</p>\n<p><a href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/index.js#L118-L179\">yannickcr/eslint-plugin-react</a></p>\n<p>상기 저장소에서 <code>eslint-plugin-react</code>가 제공하는 config를 확인 할 수 있다.</p>\n</blockquote>\n<h2 id=\"마무리\">마무리</h2>\n<p><code>plugins</code>에 추가하는 것은 모든 룰셋을 로드하지만 실제로 적용하는 것은 아닌 상태이다.\n다시 말해 <code>config</code> 또는 <code>rules</code>에 어떠한 설정도 하지 않은 상태로 <code>plugins</code>만 추가 한다면 모든 설정을 <code>off</code>로 설정한 것과 같다.</p>\n<p><code>extends</code>에 <code>config</code>를 추가하는 것은 사용하려는 <code>plugins</code>를 이미 추가한 것과 같아서 <code>plugins</code>를 별도로 추가하지 않아도 된다.</p>\n<blockquote>\n<p><code>plugin</code>이 제공하는 <code>config</code> 를 사용할 경우</p>\n<ul>\n<li><code>extends</code>만 추가 (<code>plugins</code>를 추가하지 않아도 설정을 불러올수 있음)</li>\n</ul>\n<p><code>plugin</code>이 제공하는 <code>config</code> 를 사용하지 않고 직접 정의할 경우</p>\n<ul>\n<li><code>plugin</code>을 추가하고 필요한 설정을 <code>rules</code> 를 통해 정의</li>\n</ul>\n</blockquote>\n",
    "postsByCategory": [],
    "enableContentExplorer": true
  },
  "__N_SSG": true
}
